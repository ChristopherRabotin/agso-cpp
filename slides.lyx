#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Marburg}%Warsaw
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "Droid Serif"
\font_sans "default" "Droid Sans"
\font_typewriter "default" "Hack"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 80
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "ASGO C++ Intro"
\pdf_author "Christopher Rabotin"
\pdf_keywords "cpp stl golang python rust"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This file is a solution template for:
\end_layout

\begin_layout Itemize
Talk at a conference/colloquium.
 
\end_layout

\begin_layout Itemize
Talk length is about 20min.
 
\end_layout

\begin_layout Itemize
Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
AGSO C++ Intro
\begin_inset Argument 1
status open

\begin_layout Plain Layout
C++ Intro
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, use only with long paper titles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Author
Christopher
\begin_inset space ~
\end_inset

Rabotin
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Chris Rabotin
\end_layout

\end_inset


\end_layout

\begin_layout Date
November 16, 2016
\end_layout

\begin_layout Institute
\begin_inset Formula $christopher.rabotin@\begin{cases}
gmail.com\\
colorado.edu
\end{cases}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "github.com/ChristopherRabotin"
target "https://github.com/ChristopherRabotin"

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "github.com/ChristopherRabotin/asgo-cpp/"
target "https://github.com/ChristopherRabotin/asgo-cpp/"

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "linkedin.com/in/chrisrabotin"
target "http://www.linkedin.com/in/chrisrabotin"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{agso}
\end_layout

\begin_layout Plain Layout

%
\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{%
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Quote
Programming is about practice, practice and more practice.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Itemize
Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Itemize
At *most* three subsections per section.
 
\end_layout

\begin_layout Itemize
Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Itemize
A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Itemize
In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Itemize
If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Concepts
\end_layout

\begin_layout Subsection
Object oriented programming
\begin_inset Argument 2
status open

\begin_layout Plain Layout
OOP
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Object Oriented Programming?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Re commanded reading: https://en.wikipedia.org/wiki/Object-oriented_programming
\end_layout

\begin_layout Itemize
Very common paradigm of programming which uses special data structures called
 
\emph on
objects
\end_layout

\begin_layout Itemize
Enables abstraction and separation of concern
\end_layout

\begin_layout Itemize
Instances share properties (attributes and methods)
\end_layout

\begin_deeper
\begin_layout Itemize
Attributes define the specificity of an instance
\end_layout

\begin_layout Itemize
Methods define how all objects of a given type (generally) behave
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Example

\end_layout

\begin_layout Example
Let Alice and Bob be two humans.
 We can respectively set the 
\family typewriter
name
\family default
 attribute to 
\family typewriter

\begin_inset Quotes eld
\end_inset

Alice
\begin_inset Quotes erd
\end_inset


\family default
 and 
\family typewriter

\begin_inset Quotes eld
\end_inset

Bob
\begin_inset Quotes erd
\end_inset


\family default
.
 However, both instances behave identically for the 
\family typewriter
Walk()
\family default
 method.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
Transition from C to C++
\begin_inset Argument 2
status open

\begin_layout Plain Layout
C 
\begin_inset Formula $\to$
\end_inset

 C++
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
In practice, what's an object?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

Well...
 THAT escalated quickly.
\begin_inset Quotes erd
\end_inset

 - Ron Burgundy
\end_layout

\begin_layout Standard
We'll define a 
\family typewriter
Person
\family default
 object which can 
\family typewriter
Walk()
\family default
 a provided distance.
\end_layout

\begin_layout Itemize
In C,
\end_layout

\begin_deeper
\begin_layout Itemize
Use structs to bundle attributes
\end_layout

\begin_layout Itemize
But methods are independently defined, cf.
 
\begin_inset CommandInset href
LatexCommand href
name "Struct example"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/oop1-2.cpp#L6"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Notice the 
\family typewriter
Walk()
\family default
 function requires a pointer to a struct.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
In C++, we'll use an object:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "OOP example 1"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/oop1-3.cpp#L6"

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Any issues here?
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "OOP example 2"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/oop1-1.cpp#L6"

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Identify attributes, methods, constructor, initialization and scope.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
Constructor allows to set the attributes of an object, including 
\emph on
default
\emph default
 values
\end_layout

\begin_layout Itemize
Properties defined either as 
\family typewriter
private
\family default
 or 
\family typewriter
public
\family default

\begin_inset Foot
status open

\begin_layout Plain Layout
Or 
\family typewriter
protected
\family default
.
 More on that later.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Take home problem 1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
What did I say about practice?
\end_layout

\begin_layout Itemize
Create a 3D vector object
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Don't use 
\family typewriter
std::vector
\family default
.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Attributes: 
\family typewriter
x, y, z
\family default
 as double
\end_layout

\begin_layout Itemize
Methods:
\end_layout

\begin_deeper
\begin_layout Itemize
Equals: returns whether two vectors are equal
\end_layout

\begin_layout Itemize
PrettyPrint: prints to the console as 
\family typewriter
[1, -5, 6.1] 
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Implementation example"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/exercise/pb1.cpp#L1"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Try it yourself before the link.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Namespaces
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Thank you Mario! But our princess is in another castle!
\end_layout

\begin_layout Itemize
Add some organization to your code
\end_layout

\begin_layout Itemize
Easily avoid naming conflicts
\end_layout

\begin_layout Itemize
Enable header class definitions
\end_layout

\begin_layout Itemize
Compare for yourself: 
\begin_inset CommandInset href
LatexCommand href
name "ns2.cpp diff 1"
target "https://github.com/ChristopherRabotin/asgo-cpp/commit/7ba0afbdf55a966fa1d6fd2527ab722eff62baf4?diff=split"

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Avoid: 
\family typewriter
using namespace blah;
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Unless you can guarantee no conflict at all.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Instead, specify the function(s) to extract: 
\begin_inset CommandInset href
LatexCommand href
name "ns2.cpp diff 2"
target "https://github.com/ChristopherRabotin/asgo-cpp/commit/b9ceedee63fd048ab82d5ca632b377707d16bac5"

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
A class defines a new namespace
\end_layout

\begin_layout Itemize
Allows for forward declaration, i.e.
 deferring function implementation
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "New ns3.hpp header file"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/b51cb915cd9c2d1a8409a6c408e6562fa187ab0f/src/ns3.hpp#L1"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ns3.cpp diff"
target "https://github.com/ChristopherRabotin/asgo-cpp/commit/b51cb915cd9c2d1a8409a6c408e6562fa187ab0f?diff=split#diff-a1affcebd9965c7fd56af8e827fb2c23R6"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
More info 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "http://en.cppreference.com/w/cpp/language/namespace"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Class instantiation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Don't be like your annoying roommate: clean up your mess.
\end_layout

\begin_layout Itemize
Two kinds of memory:
\end_layout

\begin_deeper
\begin_layout Itemize
Stack:
\end_layout

\begin_deeper
\begin_layout Itemize
Local variables
\end_layout

\begin_layout Itemize
Cleared upon return
\end_layout

\begin_layout Itemize
May overflow (hence 
\begin_inset Quotes eld
\end_inset

stack overflow
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
\align center

\family typewriter
Person Alice("AliceStack");
\end_layout

\end_deeper
\begin_layout Itemize
Heap
\end_layout

\begin_deeper
\begin_layout Itemize
Everything else
\end_layout

\begin_layout Itemize
Much bigger than the stack
\end_layout

\begin_layout Itemize

\emph on
You
\emph default
 are responsible for the mess
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
cf.
 https://en.wikipedia.org/wiki/Memory_leak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\family typewriter
Person *Alice = new Person("AliceHeap");
\end_layout

\end_deeper
\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
Examples:
\end_layout

\begin_deeper
\begin_layout Itemize
What should we expect here: 
\begin_inset CommandInset href
LatexCommand href
name "init1.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/6c5e11d79321c9a6565d792d7df590c9caaa5033/src/init1.cpp#L6"

\end_inset


\end_layout

\begin_layout Itemize
How about now? 
\begin_inset CommandInset href
LatexCommand href
name "init1 diff"
target "https://github.com/ChristopherRabotin/asgo-cpp/commit/6b34b269e2a79c5ff08098b1f5723e1dd41cedec?diff=unified#diff-6ddb0eeb36942cc7ae752df3abdab192L16"

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Take home problem 2
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
I hope you kept your code from problem 1
\end_layout

\begin_layout Itemize
Split up your previous class in a header file and an implementation file
\end_layout

\begin_layout Itemize
Create two vectors, one must be defined on the heap and the other on the
 stack
\end_layout

\begin_layout Itemize
Initialize one of them in a function, and the other in the 
\family typewriter
main
\end_layout

\begin_layout Itemize
Print out whether they are equal or not in the 
\family typewriter
main
\end_layout

\begin_layout Itemize
Implementation examples: 
\begin_inset CommandInset href
LatexCommand href
name "pb2.hpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/exercise/pb2.hpp#L1"

\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "pb2.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/exercise/pb2.cpp#L1"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Advanced OOP
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Adv.
 OOP
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Class inheritance
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Mommy?
\end_layout

\begin_layout Itemize
Object attributes are a 
\emph on
has-a
\series bold
\emph default
 
\series default
relationship
\end_layout

\begin_deeper
\begin_layout Itemize
e.g.
 a 
\family typewriter
Person
\family default
 has-a 
\family typewriter
name
\family default
 and 
\family typewriter
walking_distance
\end_layout

\end_deeper
\begin_layout Itemize
Class inheritance:
\end_layout

\begin_deeper
\begin_layout Itemize
Define a 
\emph on
is-a
\emph default
 relation.
\end_layout

\begin_layout Itemize
Somewhat 
\begin_inset Quotes eld
\end_inset

classes of objects
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Share common attributes and methods between objects
\end_layout

\begin_layout Itemize
Each object instance shares their class' properties and the parent's properties
\end_layout

\end_deeper
\begin_layout Itemize
Examples:
\end_layout

\begin_deeper
\begin_layout Itemize
a 
\family typewriter
Person
\family default
 
\emph on
is-a
\emph default
 great ape
\end_layout

\begin_layout Itemize
a 
\family typewriter
Gorilla
\family default
 
\emph on
is-a
\emph default
 great ape
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "inherit1.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/inherit1.cpp#L8"

\end_inset

 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "inherit2.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/inherit2.cpp#L11"

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Things to remember:
\end_layout

\begin_deeper
\begin_layout Itemize
Constructors and destructors must be redefined
\end_layout

\begin_layout Itemize
The 
\family typewriter
virtual
\family default
 keyword allows a function to be redefined
\end_layout

\begin_layout Itemize
The 
\family typewriter
protected
\family default
 keyword allows a property to be used solely by the subclasses
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Operator overloading
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Remember how you can define operators in algebraic structures in abstract
 algebra? Same, same, only really useful.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
No offense to 
\begin_inset CommandInset href
LatexCommand href
name "ring"
target "https://en.wikipedia.org/wiki/Ring_(mathematics)"

\end_inset

 lovers out there.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Enables one to use the basic C++ operators for any object
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
+ - * / >> <<
\family default
 etc.
\end_layout

\end_deeper
\begin_layout Itemize
Example: 
\begin_inset CommandInset href
LatexCommand href
name "advoop.hpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/advoop.hpp#L1"

\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "advoop.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/advoop.cpp#L1"

\end_inset


\end_layout

\begin_layout Itemize
More information: 
\begin_inset CommandInset href
LatexCommand href
name "StackOverflow"
target "http://stackoverflow.com/questions/4421706/operator-overloading"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Wikibooks"
target "https://en.wikibooks.org/wiki/C%2B%2B_Programming/Operators/Operator_Overloading"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Templating
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

Started from the bottom now we're here
\begin_inset Quotes erd
\end_inset

 - Drake.
\end_layout

\begin_layout Quote
\noindent
\align center

\series bold
This is a complicated topic.
 Don't expect to understand this immediately.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Defines genericity between objects
\end_layout

\begin_layout Itemize
Extract common behavior of unrelated objects
\end_layout

\begin_layout Itemize
Very powerful design pattern when mastered
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Examples:
\end_layout

\begin_deeper
\begin_layout Itemize
Apply a given operation to many different classes:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Example 1"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/c1b01483fa81aa9e886c7d7441c697f450107011/src/templt.cpp#L1"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Example 2"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/templt.cpp#L1"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Re-arranging items of an array in a specific way
\end_layout

\end_deeper
\begin_layout Itemize
More info on Wikiversity 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://en.wikiversity.org/wiki/C%2B%2B/Templates_1"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://en.wikiversity.org/wiki/C%2B%2B/Templates_2"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Section
Useful libraries
\end_layout

\begin_layout Subsection
The Standard Template Library
\begin_inset Argument 2
status open

\begin_layout Plain Layout
STL
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The Standard Template Library
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
STL is awesome and you should use it.
\end_layout

\begin_layout Itemize
Collection of templated data structures
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
My torture of you guys was justified, 
\begin_inset CommandInset href
LatexCommand href
name "right?"
target "http://plato.stanford.edu/entries/torture/"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In aerospace, you'll probably mostly use 
\family typewriter
std::vector
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "stl.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/stl.cpp#L1"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Several versions exist, and some are no longer maintained, so check which
 one you have
\end_layout

\begin_layout Itemize
More information: 
\begin_inset CommandInset href
LatexCommand href
name "Wikiversity"
target "https://en.wikiversity.org/wiki/C%2B%2B/STL#vector"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "this STL tutorial"
target "https://www.tutorialspoint.com/cplusplus/cpp_stl_tutorial.htm"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Take home problem 3
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Let the fun begin!
\end_layout

\begin_layout Itemize
Use STL's vector to create a 3D vector of double
\end_layout

\begin_layout Itemize
Overload the == operator to return whether two vectors are identical
\end_layout

\begin_layout Itemize
Implementation example: 
\begin_inset CommandInset href
LatexCommand href
name "pb3.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/exercise/pb3.cpp#L1"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
The Basic Linear Algebra Subprograms
\begin_inset Argument 2
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
BLAS intro of intro
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
A real drag to use, but well worth it
\end_layout

\begin_layout Itemize
BLAS is a very high performance linear algebra library
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
AFAIK, a large chunk is written in assembly, another in C and FORTRAN.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Isn't distributed by default, i.e.
 needs installation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Search for 
\family typewriter
blas-devel
\family default
 in your package manager.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Requires the 
\family typewriter
-lblas
\family default
 flag when compiling
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
e.g.
 
\family typewriter
g++ blas1.cpp -lblas
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Documentation seems spares at best, tutorials barely existent
\end_layout

\begin_layout Itemize
BLAS is split in three levels:
\end_layout

\begin_deeper
\begin_layout Enumerate
Vector operations 
\begin_inset CommandInset href
LatexCommand href
name "blas1.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/blas1.cpp#L1"

\end_inset


\end_layout

\begin_layout Enumerate
Matrix to vector operations 
\begin_inset CommandInset href
LatexCommand href
name "blas2.cpp"
target "https://github.com/ChristopherRabotin/asgo-cpp/blob/master/src/blas2.cpp#L1"

\end_inset


\end_layout

\begin_layout Enumerate
Matrix to matrix operations
\end_layout

\end_deeper
\begin_layout Itemize
BLAS does not solve linear algebra problems.
 For this, use LAPACK.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Official documentation"
target "http://www.netlib.org/lapack/explore-html/d1/df9/group__blas.html"

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Qt
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Qt
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Qt is actually a lot of fun.
\end_layout

\begin_layout Itemize
Cross platform
\end_layout

\begin_layout Itemize
Templates and various helpers
\end_layout

\begin_layout Itemize
Beautiful and easy to build user interfaces
\end_layout

\begin_layout Itemize
Works on (some) embedded devices
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Official website"
target "https://www.qt.io/"

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Full disclosure: I have not used Qt5, only Qt4.
 Back in 2013, the official documentation had examples that would not compile
\begin_inset Foot
status open

\begin_layout Plain Layout
cf.
 
\begin_inset CommandInset href
LatexCommand href
name "this stack overflow question"
target "http://stackoverflow.com/questions/17273352/qt-qml-is-it-allowed-to-have-a-model-view-as-a-delegate"

\end_inset


\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Section
Where fun and future meet
\begin_inset Argument 2
status open

\begin_layout Plain Layout
El futuro!
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not a C++ fan?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
You're not alone!
\end_layout

\begin_layout Itemize
C++ has many of disadvantages:
\end_layout

\begin_deeper
\begin_layout Itemize
No pointer safety
\end_layout

\begin_layout Itemize
Slow to code
\end_layout

\begin_layout Itemize
Shared library linking (i.e.
 not easily portable)
\end_layout

\begin_layout Itemize
Cryptic compiling errors
\end_layout

\begin_layout Itemize
Debugging is terribly annoying
\end_layout

\begin_layout Itemize
Sickening verbosity
\end_layout

\begin_layout Itemize
Multicore capabilities are annoying
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
But it's still widely used because of...
\end_layout

\begin_deeper
\begin_layout Itemize
Heritage systems
\end_layout

\begin_layout Itemize
Optimization possibilities in C and assembly
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
cf.
 
\begin_inset CommandInset href
LatexCommand href
name "this article"
target "http://www.lurklurk.org/linkers/linkers.html"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Managers who are tired of playing catch-up with the ever evolving world
 of software engineering
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Bringing awesomeness to people since 1991
\end_layout

\begin_layout Itemize
Advantages
\end_layout

\begin_deeper
\begin_layout Itemize
Plenty of libraries (cf.
 
\begin_inset CommandInset href
LatexCommand href
name "PyPI"
target "http://pypi.python.org"

\end_inset

)
\end_layout

\begin_layout Itemize
Trivial to learn
\end_layout

\begin_layout Itemize
As readable as novel
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "Usually."
target "https://github.com/influxdata/influxdb-python/blob/master/influxdb/helper.py#L17"

\end_inset

 (code by Yours truly)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Disadvantages
\end_layout

\begin_deeper
\begin_layout Itemize
Interpreted language (i.e.
 slow to execute and mostly runtime errors)
\end_layout

\begin_layout Itemize
Multicore is a drag as well (cf.
 
\begin_inset CommandInset href
LatexCommand href
name "gevent"
target "http://www.gevent.org/"

\end_inset

)
\end_layout

\begin_layout Itemize
Two different on-going releases: Python 2.x and 3.x
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Official website"
target "https://www.python.org/"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Go (golang)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Fun, and with a huge community
\end_layout

\begin_layout Itemize
By Google
\end_layout

\begin_layout Itemize
Advantages
\end_layout

\begin_deeper
\begin_layout Itemize
Compiled
\end_layout

\begin_layout Itemize
Simple syntax
\end_layout

\begin_layout Itemize
Optimized for concurrency
\end_layout

\begin_layout Itemize
Garbage collected (no need to free memory)
\end_layout

\begin_layout Itemize
No useless characters (bye-bye semi-colons!)
\end_layout

\begin_layout Itemize
Cross platform and statically linked
\end_layout

\end_deeper
\begin_layout Itemize
Disadvantages
\end_layout

\begin_deeper
\begin_layout Itemize
Quite new language, i.e.
 a lot of boilerplate code
\end_layout

\begin_layout Itemize
Garbage collected (the world freezes momentarily)
\end_layout

\begin_layout Itemize
Workspace setup is a drag
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Official website"
target "http://golang.org/"

\end_inset


\end_layout

\begin_layout Itemize
Learn online: 
\begin_inset CommandInset href
LatexCommand href
name "Go By Example"
target "http://gobyexample.com/"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Rust
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Quite possibly a C++ killer
\end_layout

\begin_layout Itemize
Led by Mozilla
\end_layout

\begin_layout Itemize
Advantages
\end_layout

\begin_deeper
\begin_layout Itemize
Ridiculous speeds
\end_layout

\begin_layout Itemize
Outstanding memory management and safety (variables are immutable by default)
\end_layout

\begin_layout Itemize
Optimized for concurrency
\end_layout

\begin_layout Itemize
Runs on bare ARM processors (i.e.
 can be used for hard real time applications)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "via Zinc"
target "https://zinc.rs/"

\end_inset

 (experimental)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Disadvantages
\end_layout

\begin_deeper
\begin_layout Itemize
Too recent to be stable
\end_layout

\begin_layout Itemize
Some functional programming paradigms are confusing
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Official website"
target "http://rust-lang.org/"

\end_inset


\end_layout

\begin_layout Itemize
Learn online: 
\begin_inset CommandInset href
LatexCommand href
name "Rust By Example"
target "http://rustbyexample.com/"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%grrr
\end_layout

\end_inset


\end_layout

\end_body
\end_document
